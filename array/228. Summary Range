228. Summary Ranges
üìç LeetCode Link

1. Brute Force Approach (with Time Complexity)
 * Approach: Brute Force
 * Time Complexity: O(n)
 * Space Complexity: O(1) extra (excluding result list)
 * 
 * We iterate through the array and keep tracking the start of a range.
 * Whenever we find that the next number is not consecutive, we close the range.
 */

import java.util.*;

public class SummaryRanges_BruteForce {
    public List<String> summaryRanges(int[] nums) {
        List<String> result = new ArrayList<>();
        if (nums.length == 0) return result;

        int start = nums[0];

        for (int i = 1; i <= nums.length; i++) {
            // If it's the end of a range
            if (i == nums.length || nums[i] != nums[i - 1] + 1) {
                int end = nums[i - 1];
                if (start == end) {
                    result.add(String.valueOf(start));
                } else {
                    result.add(start + "->" + end);
                }

                // Set new start if not at end
                if (i < nums.length) {
                    start = nums[i];
                }
            }
        }

        return result;
    }
}



2. Optimal Approach (with Time Complexity)

 * Approach: Two Pointer / Optimized Linear Scan
 * Time Complexity: O(n)
 * Space Complexity: O(1) extra (excluding result list)
 * 
 * We use a single loop and move a pointer to track the end of each consecutive sequence.
 */

import java.util.*;

public class SummaryRanges_Optimal {
    public List<String> summaryRanges(int[] nums) {
        List<String> result = new ArrayList<>();
        int i = 0;
        int n = nums.length;

        while (i < n) {
            int start = i;
            // Keep moving forward while consecutive numbers found
            while (i + 1 < n && nums[i + 1] == nums[i] + 1) {
                i++;
            }

            if (start == i) {
                result.add(String.valueOf(nums[start]));
            } else {
                result.add(nums[start] + "->" + nums[i]);
            }

            i++;
        }

        return result;
    }
}
